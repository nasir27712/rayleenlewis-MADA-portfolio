---
title: "An example cleaning script"
author: "Andreas Handel"
date: "2023-01-03"
output: html_document
---


# Processing script

This Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.


# Setup

Load needed packages. make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
```


# Data loading

Note that for functions that come from specific packages (instead of base R), I often specify both package and function like so:
package::function() that's not required one could just call the function specifying the package makes it clearer where the function "lives",
but it adds typing. You can do it either way.

```{r}
# path to data
# note the use of the here() package and not absolute paths
data_location <- here::here("starter-analysis-exercise","data","raw-data","exampledata2.xlsx")
rawdata <- readxl::read_excel(data_location)
```
Side note: all that was changed in this box was changing "exampledata.xlsx" to "exampledata2.xlsx" to load in Rayleen's data (as per the instructions on the course website).

# Check data

First we can look at the codebook

```{r}
codebook <- readxl::read_excel(data_location, sheet ="Codebook")
print(codebook)
```


Several ways of looking at the data

```{r}
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
```



# Cleaning

By inspecting the data as done above, we find some problems that need addressing:

First, there is an entry for height which says "sixty" instead of a number. 
Does that mean it should be a numeric 60? It somehow doesn't make sense since the weight is 60kg, which can't happen for a 60cm person (a baby).
Since we don't know how to fix this, we might decide to remove the person. This "sixty" entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn't very meaningful. So let's fix that first.

```{r}
d1 <- rawdata %>% dplyr::filter( Height != "sixty" ) %>% 
                  dplyr::mutate(Height = as.numeric(Height))
skimr::skim(d1)
hist(d1$Height)
```

Now we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don't know, we might need to remove this person, which we'll do here.

```{r}
d2 <- d1 %>% dplyr::mutate( Height = replace(Height, Height=="6",round(6*30.48,0)) )
skimr::skim(d2)
```
Side note: the instructions above claim to remove this person, but the code below is not removing the person; instead, the code is changing their height from what is presumed to be feet into centimeters. I will not change the code to fix this in case this was an accident in the instructions. 

Height values seem ok now.

Now let's look at the `Weight` variable. There is a person with weight of 7000, which is impossible, and one person with missing weight.
To be able to analyze the data, we'll remove those individuals as well.

```{r}
d3 <- d2 %>%  dplyr::filter(Weight != 7000) %>% tidyr::drop_na()
skimr::skim(d3)
```

Now checking the `Gender` variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.

```{r}
d3$Gender <- as.factor(d3$Gender)  
skimr::skim(d3)
```


Now we see that there is another NA, but it's not `NA` from R, instead it was loaded as character and is now considered as a category.
Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I'm also using droplevels() to get rid of it.

```{r}
d4 <- d3 %>% dplyr::filter( !(Gender %in% c("NA","N")) ) %>% droplevels()
skimr::skim(d4)
```
Side note: I will make sure that the data classes of the GPA and Emphasis variables are appropriate.

```{r}
class(d4$GPA)
class(d4$Emphasis)
```

The "Emphasis" variable has the same situation as the "Gender" variable above. It is appearing as "character" when it should be a factor since it is a categorical variable. 

```{r}
d4$Emphasis <- as.factor(d4$Emphasis)
class(d4$Emphasis)
```

All done, data is clean now. 

Let's assign at the end to some final variable, this makes it easier to add further cleaning steps above.

```{r}
processeddata <- d4
```


# Save data 

Finally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. 
This preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. If you do CSV, you might want to write down somewhere what each variable is.

See here for some suggestions on how to store your processed data:
http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata

```{r}
save_data_location <- here::here("starter-analysis-exercise","data","processed-data","processeddata2.rds")
saveRDS(processeddata, file = save_data_location)
```
Side note: the only thing changed in the code chunk above was "processeddata.rds" being changed to "processeddata2.rds" (as per the instructions on the course website).

Note the use of the `here` package and `here` command to specify a path relative to the main project directory, that is the folder that contains the `.Rproj` file. Always use this approach instead of hard-coding file paths that only exist on your computer.



# Notes

Removing anyone observation with "faulty" or missing data is one approach. It's often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information).



