[
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presenting Data and Results",
    "section": "",
    "text": "The staff at 538 of ABC News included a graphic showing the average regular-season home game attendance for all teams in the Big Four North American men’s professional sports leagues. This was part of their 25 coolest charts we made in 2023 list and was included in the article titled, “How Massive The NFL Really Is, In 4 Charts” by Ryan Best.\n\n\n\n\n\nThe data for this plot was not readily accessible, so I extracted the data using a free online plot digitizer.\n\n\nMy goal was to recreate this figure using a combination of AI generated code (using ChatGPT) and my own personal tweaks.\nAs a very first step, I wanted to see what ChatGPT would give me if I only gave it the data and figure. Using the following prompt, I got a very basic plot that at least got the data points right: Using the attached data, write r code to create a plot that resembles the attached avif file\n\n#ChatGPT from first prompt of only data and figure\n# Load the data\ndata &lt;- read.csv(\"capacity_plot_data.csv\")\n\n# Clean column names\ncolnames(data) &lt;- trimws(colnames(data))\n\n# Create the plot\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"red\", alpha = 0.7) +\n  labs(title = \"Capacity Plot\", x = \"X Axis\", y = \"Y Axis\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    axis.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\nMy second prompt was tailored specifically to try to get as close to the figure as possible. The prompt was:\nUpdate the code to do the following:\n\nRemove numbers on x-axis and add the following labels “NFL” at x = 1, “MLB” at x = 2, “NBA” at x = 3, and “NHL” at x = 4.\nremove main title and axes titles.\nUse filled circles as the markers.\nFor points with x-values &lt; 1, set color to orange. For points with x values between 1 and 1.5, set color to purple. For points with an x value between 2 and 3, set color to yellow. For points with an x value between 3.5 and 5, set color to green.\nGraph and label averages for each cluster of points.\n\nThis produced code with an error or two. I tried to get ChatGPT to fix the error (related to missing a color specification), but the solutions offered didn’t fix the issue, so I fixed it myself (had to add a color to the last geom_text line). The figure below is created using ChatGPT’s solution with some slight modifications by me for trouble shooting.\n\n# Load the data\ndata &lt;- read.csv(\"capacity_plot_data.csv\")\n\n# Clean column names\ncolnames(data) &lt;- trimws(colnames(data))\n\n# Define colors based on x value ranges\ndata$color &lt;- with(data, ifelse(data$x &lt; 1, \"orange\", \n                          ifelse(data$x &gt;= 1 & data$x &lt; 1.5, \"purple\", \n                          ifelse(data$x &gt;= 2 & data$x &lt; 3, \"yellow\", \n                          ifelse(data$x &gt;= 3.5 & data$x &lt; 5, \"green\", \"black\")))))\n\n# Define x-axis labels\nx_labels &lt;- c(\"1\" = \"NFL\", \"2\" = \"MLB\", \"3\" = \"NBA\", \"4\" = \"NHL\")\n\n# Compute means for each cluster\nmeans &lt;- aggregate(y ~ cut(x, breaks = c(-Inf, 1, 1.5, 3, 5, Inf)), data, mean)\nnames(means) &lt;- c(\"x_group\", \"y_mean\")\nmeans$x &lt;- c(0.5, 1.25, 2.5, 4)  # Approximate midpoints for clusters\n\n# Create the plot\nggplot(data, aes(x = x, y = y, color = color)) +\n  geom_point(shape = 16, size = 3) +  # Use filled circles\n  scale_x_continuous(breaks = c(1, 2, 3, 4), labels = x_labels) +\n  scale_color_identity() +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_text(face = \"bold\"),\n    plot.title = element_blank(),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank()\n  ) +\n  geom_point(data = means, aes(x = x, y = y_mean), color = \"black\", size = 4) +\n  geom_text(data = means, aes(x = x, y = y_mean, label = round(y_mean, 1)), color = \"black\", vjust = -1, fontface = \"bold\")\n\n\n\n\n\n\n\n\nI went through several more iterations with ChatGPT to get the figure as close to the original as possible (so many that I hit the free plan limit for GPT-4o). I ended up tweaking may things myself, including creating league specific labels and locations for the labels, creating axes labels that matched the figure exactly rather than using the data as is (e.g., 90,000 was labeled as 90k), setting an aspect ratio more similar to the original figure, and even setting the figure title to have the same words on each line as the original. The final code and figure are below.\n\n# Load the data\ndata &lt;- read.csv(\"capacity_plot_data.csv\")\n\n# Clean column names\ncolnames(data) &lt;- trimws(colnames(data))\n\n# Define colors based on x value ranges\ndata$color &lt;- with(data, ifelse(data$x &lt; 1, \"darkorange\", \n                          ifelse(data$x &gt;= 1 & data$x &lt; 1.5, \"purple\", \n                          ifelse(data$x &gt;= 2 & data$x &lt; 3, \"gold\", \n                          ifelse(data$x &gt;= 3.5 & data$x &lt; 4.5, \"green\", \"black\")))))\n\n# Define x-axis labels\nx_labels &lt;- c(\"0.5\" = \"NFL\", \"1.1\" = \"MLB\", \"2.5\" = \"NBA\", \"4\" = \"NHL\")\ny_labels &lt;- c(\"0\" = \"0\", \"10000\" = \"10\",\"20000\" = \"20\",\"30000\" = \"30\",\"40000\" = \"40\",\"50000\" = \"50\",\"60000\" = \"60\",\"70000\" = \"70\",\"80000\" = \"80\",\"90000\" = \"90k\")\n\n# Compute means for each cluster\nmeans &lt;- aggregate(y ~ cut(x, breaks = c(-Inf, 1, 1.5, 3, 4.5, Inf)), data, mean)\nnames(means) &lt;- c(\"x_group\", \"y_mean\")\nmeans$xmin &lt;- c(-Inf, 1, 1.5, 3)  # Start of clusters\nmeans$xmax &lt;- c(1, 1.5, 3, 4.5)  # End of clusters\nmeans$x &lt;- c(0.5, 1.1, 2.5, 4)  # Midpoints for text labels\n\n# Create the plot\nggplot(data, aes(x = x, y = y, color = color)) +\n  geom_point(shape = 21, size = 3, stroke = 0.3, fill = data$color, color = \"white\") +  # Use filled circles with white border\n  #scale_x_continuous(breaks = c(0.5, 1.1, 2.5, 4), labels = x_labels) +\n  scale_y_continuous(breaks = seq(0, max(data$y, na.rm = TRUE), by = 10000), labels = y_labels) +\n  scale_color_identity() +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    plot.title = element_text(hjust = 0, size = 10),\n    panel.grid.major.x = element_blank(),  # Remove vertical grid lines\n    panel.grid.major.y = element_line(color = \"lightgray\", size = 0.3),  # Thinner light gray horizontal grid lines\n    panel.grid.minor = element_blank(),\n    axis.line.x = element_line(color = \"black\")  # Reduce width # Show x-axis \n  ) +\n  geom_segment(data = means, aes(x = x-0.15, xend = x+0.15, y = y_mean, yend = y_mean), linetype = \"dashed\", color = \"black\") +  # Extend dashed lines to cluster width\n#  geom_text(data = means, aes(x = x, y = y_mean, label = paste(\"AVG.\", round(y_mean, 0))), color = \"black\", vjust = -4, fontface = \"bold\") +\n  \n  # Add custom labels for each cluster\n  #NFL label\n  geom_text(aes(x = 1, y = max(data[data$color==\"darkorange\",]$y) * 0.8, label = \"NFL\", color = \"darkorange\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==0.5,], aes(x = 1, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #NFL Mean label\n  \n  geom_text(aes(x = 0.65, y = max(data[data$color==\"purple\",]$y) * 0.65,  label = \"MLB\", color = \"purple\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==1.1,], aes(x = 0.65, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #MLB Mean label\n  \n  geom_text(aes(x = 1.9, y = max(data[data$color==\"gold\",]$y) * 1.1,  label = \"NBA\", color = \"gold\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==2.5,], aes(x = 1.9, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #NBA Mean label\n  \n  geom_text(aes(x = 3.4, y = max(data[data$color==\"green\",]$y) * 1.1, label = \"NHL\", color = \"green\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==4,], aes(x = 3.4, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #NHL Mean label\n  coord_fixed(ratio = 0.00007) +\n  \n  ggtitle(\"Average regular-season home game \\nattendance for all teams in the Big Four \\nNorth American men's pro sports leagues\")\n\n\n\n\n\n\n\n\nFor comparison, I’m showing the original figure. \nAs a note, because the exact data points were not available and had to be extracted from the image, there are small differences in the calculated averages between the two figures. The average capacity size differs by &lt;400 between the original and recreated figures for NFL venues and &lt;40 for the other leagues.\nOverall, the figures are very similar. The markers are similar colors with white borders, the labels for the league and “AVG. [mean]” are in ismilar places, means are noted with a dashed line for each league, y-axis labels are the exact same, the title is the same with the same words per line, the aspect ratio is similar, and the grid lines are similar. The created graph does not include the arrows and text going to the highest and lowest capacity venues or footnotes.\n\n\n\nI’ve never created a table in R, so I decided to take some of the advice provided in the Discussion posts about the use of AI and ask ChatGPT to “give me code to explore the features of the gt package in R to make tables.” Because I had previously used this window for helping with my chart above, it used some of the aspects from the data in its example code (e.g., men’s sports leagues), but it didn’t have any context for what the data represented, so it made up a fake dataset. The code itself threw several errors, so I used this to see what some of the basic functionality of some of the buzzwords (e.g., cols_label, tab_style).\nTo work towards the final table, I itteratively worked with ChatGPT to “build” the table and features. My first prompt was to get the results I wanted int he table: Using a data frame with two variables, Y (continuous) and league (4 level factor), write R code to create a table showing the mean (standard deviation), median (q1, q3), min, and max with p-values testing the difference in means and medians across the four groups.\nFrom here, I used prompts to implement one feature at a time. First, I focused on getting p-values. ChaptGPT provided an example of how to do this, but the p-values were at the bottom of the table, which I didn’t love, so I wrote new code to append the p-values as a column instead. Next, I focused on the footnotes. ChatGPT wrote code to add a footnote for the comparison of means testing. I used this to write my own footnote for the medians column. Next, I worked on adding histograms for each of the rows. Once I worked out this code, I wanted to take it a step further and color the histograms to match the colors from the figure above. Next, I added the descriptive footnote. I based this code off of the original error-riddled code provided from the gt exploration prompt. And, finally, I wanted to add some conditional coding. I decided to identify the lowest minimum attendance and color the cell light gray and set the font to black. ChatGPT helped with this code. I wrote my own code to similarly identify the highest maximum value in the max column and color the cell light blue and set the font to blue. The text below the table was modified to include notes on the coloring.\n#Creating a variable for league based on the x values\ndata &lt;- data %&gt;%\n  mutate(league = ifelse(x &lt; 1, \"NFL\", \n                          ifelse(x &gt;= 1 & x &lt; 1.5, \"MLB\", \n                          ifelse(x &gt;= 2 & x &lt; 3, \"NBA\", \n                          ifelse(x &gt;= 3.5 & x &lt; 5, \"NHL\", \"error\"))))) \n#Restricting to the variables needed for data analysis\ndata_t &lt;- data %&gt;%\n  select(league, y)\n\n\n# Compute summary statistics, all statistics were rescaled to the 1000s\nsummary_stats &lt;- data_t %&gt;%\n  group_by(league) %&gt;%\n  summarise(\n    `Mean (SD)` = paste0((round(mean(y), -1)/1000), \" (\", (round(sd(y), -1)/1000), \")\"),\n    `Median (Q1, Q3)` = paste0((round(median(y), -1)/1000), \" (\", \n                                (round(quantile(y, 0.25), -1)/1000), \", \", \n                                (round(quantile(y, 0.75),-1)/1000), \")\"),\n    Min = (round(min(y), -1)/1000),\n    Max = (round(max(y), -1)/1000),\n    .groups = \"drop\"\n  )\n\n\n# Compute p-values\nanova_p &lt;- summary(aov(y ~ league, data = data_t))[[1]][\"Pr(&gt;F)\"][1, 1] #comparison of means\nkw_p &lt;- kruskal.test(y ~ league, data = data_t)$p.value #comparison of medians\n\n# Convert p-values to a formatted row\np_values &lt;- data.frame(\n  league = \"p-value\",\n  `Mean (SD)` = if_else(anova_p &lt; 0.0001, \"&lt;0.0001\", as.character(round(anova_p, 4))),\n  `Median (Q1, Q3)` = if_else(anova_p &lt; 0.0001, \"&lt;0.0001\", as.character(round(kw_p, 4))),\n  Min = NA,\n  Max = NA\n)\n\n#Created a dataset from the p-value information so p-values could be appended as columns rather than rows, also renamed columns\np_values_mini &lt;- p_values %&gt;%\n  select(`Mean..SD.`, `Median..Q1..Q3.`) %&gt;%\n  rename(p_value_mean = `Mean..SD.`, p_value_median = `Median..Q1..Q3.`) %&gt;%\n  add_row(p_value_mean = c(rep(\"-\", 3)), p_value_median = c(rep(\"-\", 3)))\n# Combine statistics and p-values\nfinal_table &lt;- bind_cols(summary_stats, p_values_mini)\n\n#Finding the max of the range of the x-axis to be used in each of the histograms so the histograms can have the same x-axis\nxlim_range &lt;- range(data$y, na.rm = TRUE)\n\n#Creating distribution of attendance by league\ndensity_plots &lt;- data %&gt;%\n  group_by(league) %&gt;%\n  group_split() %&gt;%\n  purrr::map(~ {\n    p &lt;- ggplot(.x, aes(x = y)) +\n      geom_density(fill = unique(.x$color), alpha = 0.5) +\n      xlim(xlim_range) + \n      theme_minimal() +\n      labs(x = NULL, y = NULL) +\n      theme(axis.text = element_blank(), axis.ticks = element_blank())\n\n    # Save image and return filename\n    img_file &lt;- paste0(\"density_\", unique(.x$league), \".png\")\n    ggsave(img_file, plot = p, width = 2, height = 1)\n    return(img_file)\n  })\n\n#Adding filenames of the histograms to the stats results\nfinal_table$density &lt;- density_plots\n\n#Identifying the row where the minimum min is\nmin_row &lt;- which.min(final_table$Min)\n#Identifying the row where the maximum max is\nmax_row &lt;- which.max(final_table$Max)\n\n# Create a publication-ready table with gt\n\ngt_table &lt;- final_table %&gt;%\n  gt() %&gt;%\n  #Setting table title\n  tab_header(\n    title = \"Average regular season home game attendence, in thousands\",\n    subtitle = \"Comparison across Big Four men's sports leagues\"\n  ) %&gt;%\n  #Creating header that spans multiple columns\n  tab_spanner(\n    label = md(\"**Summary Statistics**\"),\n    columns = c(`Mean (SD)`, `Median (Q1, Q3)`, Min, Max)\n  ) %&gt;%\n  fmt_image(\n  columns = density,\n  rows = everything(),\n  height = NULL,\n  width = NULL,\n  sep = \" \",\n  path = NULL,\n  file_pattern = \"{x}\",\n  encode = TRUE\n) %&gt;%\n\n  cols_label(\n    league = \"League\",\n    `Mean (SD)` = \"Mean (SD)\",\n    `Median (Q1, Q3)` = \"Median (Q1, Q3)\",\n    Min = \"Min\",\n    Max = \"Max\",\n    p_value_mean = md(\"Comparison of means *P*-value\"),\n    p_value_median = md(\"Comparison of medians *P*-value\"),\n    density = \"Distribution of attendance\"\n    \n  ) %&gt;%\n  # Apply style to the cell with the lowest value in the Min column\n  tab_style(\n    style = list(cell_fill(color = \"lightgray\"),\n    cell_text(color = \"black\")),\n    locations = cells_body(\n      rows = min_row,\n      columns = \"Min\"\n    )\n  )%&gt;%\n  # Apply style to the cell with the highest value in the max column\n  tab_style(\n    style = list(cell_fill(color = \"lightblue\"),\n    cell_text(color = \"blue\")),\n    locations = cells_body(\n      rows = max_row,\n      columns = \"Max\"\n    )\n  )%&gt;%\n    #Making all column headers bld\n    tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels(everything()) \n  )%&gt;%\n    #Creating a footnote for the ANOVA p-value\n    tab_footnote(\n    footnote = md(\"*P*-value from ANOVA comparing mean attendance across the 4 leagues\"),\n    locations = cells_column_labels(columns = p_value_mean)\n  ) %&gt;%\n    #Creating a footnote for the Kruskal wallis p-value\n    tab_footnote(\n    footnote = md(\"*P*-value from Kruskal-Wallis test comparing median attendance across the 4 leagues\"),\n    locations = cells_column_labels(columns = p_value_median)\n  )  %&gt;%\n  #Creating footnote to explain coloring of the cells\n  tab_footnote(\n    footnote = md(\"Blue cell notes row with highest maximum attendence. Gray cell notes row with lowest minimum attendance.\")) %&gt;%\n  fmt_missing(columns = everything(), missing_text = \"—\") %&gt;%\n  #Adding descriptive caption for the table\n  tab_source_note(\n    source_note = md(\"**Table 1 caption:** Table presents basic summary statistics (i.e., mean, median, min, and max) home game attendance by league, demonstrating that there are substantial differences in game attendence by sport, with attendance being highest for NFL games and lowest for NHL games.\")\n  ) \nWarning: Since gt v0.6.0 `fmt_missing()` is deprecated and will soon be removed.\nℹ Use `sub_missing()` instead.\nThis warning is displayed once every 8 hours.\n# Print table\ngt_table\n\n\n\n  \n    \n      Average regular season home game attendence, in thousands\n    \n    \n      Comparison across Big Four men's sports leagues\n    \n    \n      League\n      \n        Summary Statistics\n      \n      Comparison of means P-value1\n      Comparison of medians P-value2\n      Distribution of attendance\n    \n    \n      Mean (SD)\n      Median (Q1, Q3)\n      Min\n      Max\n    \n  \n  \n    MLB\n26.79 (9.64)\n28.4 (18.15, 32.92)\n9.76\n47.71\n&lt;0.0001\n&lt;0.0001\n\n    NBA\n17.97 (2.14)\n17.91 (16.29, 19.73)\n13.98\n21.56\n-\n-\n\n    NFL\n69.78 (6.51)\n69.01 (66.46, 72.06)\n58.28\n93.88\n-\n-\n\n    NHL\n16.89 (3.06)\n17.24 (15.72, 18.76)\n4.76\n21.07\n-\n-\n\n  \n  \n    \n      Table 1 caption: Table presents basic summary statistics (i.e., mean, median, min, and max) home game attendance by league, demonstrating that there are substantial differences in game attendence by sport, with attendance being highest for NFL games and lowest for NHL games.\n    \n  \n  \n    \n       Blue cell notes row with highest maximum attendence. Gray cell notes row with lowest minimum attendance.\n    \n    \n      1 P-value from ANOVA comparing mean attendance across the 4 leagues\n    \n    \n      2 P-value from Kruskal-Wallis test comparing median attendance across the 4 leagues"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#this-page-is-all-about-data-presentation",
    "href": "presentation-exercise/presentation-exercise.html#this-page-is-all-about-data-presentation",
    "title": "Presenting Data and Results",
    "section": "",
    "text": "The staff at 538 of ABC News included a graphic showing the average regular-season home game attendance for all teams in the Big Four North American men’s professional sports leagues. This was part of their 25 coolest charts we made in 2023 list and was included in the article titled, “How Massive The NFL Really Is, In 4 Charts” by Ryan Best.\n\n\n\n\n\nThe data for this plot was not readily accessible, so I extracted the data using a free online plot digitizer.\n\n\nMy goal was to recreate this figure using a combination of AI generated code (using ChatGPT) and my own personal tweaks.\nAs a very first step, I wanted to see what ChatGPT would give me if I only gave it the data and figure. Using the following prompt, I got a very basic plot that at least got the data points right: Using the attached data, write r code to create a plot that resembles the attached avif file\n\n#ChatGPT from first prompt of only data and figure\n# Load the data\ndata &lt;- read.csv(\"capacity_plot_data.csv\")\n\n# Clean column names\ncolnames(data) &lt;- trimws(colnames(data))\n\n# Create the plot\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"red\", alpha = 0.7) +\n  labs(title = \"Capacity Plot\", x = \"X Axis\", y = \"Y Axis\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    axis.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\nMy second prompt was tailored specifically to try to get as close to the figure as possible. The prompt was:\nUpdate the code to do the following:\n\nRemove numbers on x-axis and add the following labels “NFL” at x = 1, “MLB” at x = 2, “NBA” at x = 3, and “NHL” at x = 4.\nremove main title and axes titles.\nUse filled circles as the markers.\nFor points with x-values &lt; 1, set color to orange. For points with x values between 1 and 1.5, set color to purple. For points with an x value between 2 and 3, set color to yellow. For points with an x value between 3.5 and 5, set color to green.\nGraph and label averages for each cluster of points.\n\nThis produced code with an error or two. I tried to get ChatGPT to fix the error (related to missing a color specification), but the solutions offered didn’t fix the issue, so I fixed it myself (had to add a color to the last geom_text line). The figure below is created using ChatGPT’s solution with some slight modifications by me for trouble shooting.\n\n# Load the data\ndata &lt;- read.csv(\"capacity_plot_data.csv\")\n\n# Clean column names\ncolnames(data) &lt;- trimws(colnames(data))\n\n# Define colors based on x value ranges\ndata$color &lt;- with(data, ifelse(data$x &lt; 1, \"orange\", \n                          ifelse(data$x &gt;= 1 & data$x &lt; 1.5, \"purple\", \n                          ifelse(data$x &gt;= 2 & data$x &lt; 3, \"yellow\", \n                          ifelse(data$x &gt;= 3.5 & data$x &lt; 5, \"green\", \"black\")))))\n\n# Define x-axis labels\nx_labels &lt;- c(\"1\" = \"NFL\", \"2\" = \"MLB\", \"3\" = \"NBA\", \"4\" = \"NHL\")\n\n# Compute means for each cluster\nmeans &lt;- aggregate(y ~ cut(x, breaks = c(-Inf, 1, 1.5, 3, 5, Inf)), data, mean)\nnames(means) &lt;- c(\"x_group\", \"y_mean\")\nmeans$x &lt;- c(0.5, 1.25, 2.5, 4)  # Approximate midpoints for clusters\n\n# Create the plot\nggplot(data, aes(x = x, y = y, color = color)) +\n  geom_point(shape = 16, size = 3) +  # Use filled circles\n  scale_x_continuous(breaks = c(1, 2, 3, 4), labels = x_labels) +\n  scale_color_identity() +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_text(face = \"bold\"),\n    plot.title = element_blank(),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank()\n  ) +\n  geom_point(data = means, aes(x = x, y = y_mean), color = \"black\", size = 4) +\n  geom_text(data = means, aes(x = x, y = y_mean, label = round(y_mean, 1)), color = \"black\", vjust = -1, fontface = \"bold\")\n\n\n\n\n\n\n\n\nI went through several more iterations with ChatGPT to get the figure as close to the original as possible (so many that I hit the free plan limit for GPT-4o). I ended up tweaking may things myself, including creating league specific labels and locations for the labels, creating axes labels that matched the figure exactly rather than using the data as is (e.g., 90,000 was labeled as 90k), setting an aspect ratio more similar to the original figure, and even setting the figure title to have the same words on each line as the original. The final code and figure are below.\n\n# Load the data\ndata &lt;- read.csv(\"capacity_plot_data.csv\")\n\n# Clean column names\ncolnames(data) &lt;- trimws(colnames(data))\n\n# Define colors based on x value ranges\ndata$color &lt;- with(data, ifelse(data$x &lt; 1, \"darkorange\", \n                          ifelse(data$x &gt;= 1 & data$x &lt; 1.5, \"purple\", \n                          ifelse(data$x &gt;= 2 & data$x &lt; 3, \"gold\", \n                          ifelse(data$x &gt;= 3.5 & data$x &lt; 4.5, \"green\", \"black\")))))\n\n# Define x-axis labels\nx_labels &lt;- c(\"0.5\" = \"NFL\", \"1.1\" = \"MLB\", \"2.5\" = \"NBA\", \"4\" = \"NHL\")\ny_labels &lt;- c(\"0\" = \"0\", \"10000\" = \"10\",\"20000\" = \"20\",\"30000\" = \"30\",\"40000\" = \"40\",\"50000\" = \"50\",\"60000\" = \"60\",\"70000\" = \"70\",\"80000\" = \"80\",\"90000\" = \"90k\")\n\n# Compute means for each cluster\nmeans &lt;- aggregate(y ~ cut(x, breaks = c(-Inf, 1, 1.5, 3, 4.5, Inf)), data, mean)\nnames(means) &lt;- c(\"x_group\", \"y_mean\")\nmeans$xmin &lt;- c(-Inf, 1, 1.5, 3)  # Start of clusters\nmeans$xmax &lt;- c(1, 1.5, 3, 4.5)  # End of clusters\nmeans$x &lt;- c(0.5, 1.1, 2.5, 4)  # Midpoints for text labels\n\n# Create the plot\nggplot(data, aes(x = x, y = y, color = color)) +\n  geom_point(shape = 21, size = 3, stroke = 0.3, fill = data$color, color = \"white\") +  # Use filled circles with white border\n  #scale_x_continuous(breaks = c(0.5, 1.1, 2.5, 4), labels = x_labels) +\n  scale_y_continuous(breaks = seq(0, max(data$y, na.rm = TRUE), by = 10000), labels = y_labels) +\n  scale_color_identity() +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.title = element_blank(),\n    axis.text.x = element_blank(),\n    plot.title = element_text(hjust = 0, size = 10),\n    panel.grid.major.x = element_blank(),  # Remove vertical grid lines\n    panel.grid.major.y = element_line(color = \"lightgray\", size = 0.3),  # Thinner light gray horizontal grid lines\n    panel.grid.minor = element_blank(),\n    axis.line.x = element_line(color = \"black\")  # Reduce width # Show x-axis \n  ) +\n  geom_segment(data = means, aes(x = x-0.15, xend = x+0.15, y = y_mean, yend = y_mean), linetype = \"dashed\", color = \"black\") +  # Extend dashed lines to cluster width\n#  geom_text(data = means, aes(x = x, y = y_mean, label = paste(\"AVG.\", round(y_mean, 0))), color = \"black\", vjust = -4, fontface = \"bold\") +\n  \n  # Add custom labels for each cluster\n  #NFL label\n  geom_text(aes(x = 1, y = max(data[data$color==\"darkorange\",]$y) * 0.8, label = \"NFL\", color = \"darkorange\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==0.5,], aes(x = 1, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #NFL Mean label\n  \n  geom_text(aes(x = 0.65, y = max(data[data$color==\"purple\",]$y) * 0.65,  label = \"MLB\", color = \"purple\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==1.1,], aes(x = 0.65, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #MLB Mean label\n  \n  geom_text(aes(x = 1.9, y = max(data[data$color==\"gold\",]$y) * 1.1,  label = \"NBA\", color = \"gold\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==2.5,], aes(x = 1.9, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #NBA Mean label\n  \n  geom_text(aes(x = 3.4, y = max(data[data$color==\"green\",]$y) * 1.1, label = \"NHL\", color = \"green\"), fontface = \"bold\", size = 3) +\n  geom_text(data = means[means$x==4,], aes(x = 3.4, y = y_mean, label = paste(\"AVG.\\n\", round(y_mean, 0))), color = \"black\", size = 2) + #NHL Mean label\n  coord_fixed(ratio = 0.00007) +\n  \n  ggtitle(\"Average regular-season home game \\nattendance for all teams in the Big Four \\nNorth American men's pro sports leagues\")\n\n\n\n\n\n\n\n\nFor comparison, I’m showing the original figure. \nAs a note, because the exact data points were not available and had to be extracted from the image, there are small differences in the calculated averages between the two figures. The average capacity size differs by &lt;400 between the original and recreated figures for NFL venues and &lt;40 for the other leagues.\nOverall, the figures are very similar. The markers are similar colors with white borders, the labels for the league and “AVG. [mean]” are in ismilar places, means are noted with a dashed line for each league, y-axis labels are the exact same, the title is the same with the same words per line, the aspect ratio is similar, and the grid lines are similar. The created graph does not include the arrows and text going to the highest and lowest capacity venues or footnotes.\n\n\n\nI’ve never created a table in R, so I decided to take some of the advice provided in the Discussion posts about the use of AI and ask ChatGPT to “give me code to explore the features of the gt package in R to make tables.” Because I had previously used this window for helping with my chart above, it used some of the aspects from the data in its example code (e.g., men’s sports leagues), but it didn’t have any context for what the data represented, so it made up a fake dataset. The code itself threw several errors, so I used this to see what some of the basic functionality of some of the buzzwords (e.g., cols_label, tab_style).\nTo work towards the final table, I itteratively worked with ChatGPT to “build” the table and features. My first prompt was to get the results I wanted int he table: Using a data frame with two variables, Y (continuous) and league (4 level factor), write R code to create a table showing the mean (standard deviation), median (q1, q3), min, and max with p-values testing the difference in means and medians across the four groups.\nFrom here, I used prompts to implement one feature at a time. First, I focused on getting p-values. ChaptGPT provided an example of how to do this, but the p-values were at the bottom of the table, which I didn’t love, so I wrote new code to append the p-values as a column instead. Next, I focused on the footnotes. ChatGPT wrote code to add a footnote for the comparison of means testing. I used this to write my own footnote for the medians column. Next, I worked on adding histograms for each of the rows. Once I worked out this code, I wanted to take it a step further and color the histograms to match the colors from the figure above. Next, I added the descriptive footnote. I based this code off of the original error-riddled code provided from the gt exploration prompt. And, finally, I wanted to add some conditional coding. I decided to identify the lowest minimum attendance and color the cell light gray and set the font to black. ChatGPT helped with this code. I wrote my own code to similarly identify the highest maximum value in the max column and color the cell light blue and set the font to blue. The text below the table was modified to include notes on the coloring.\n#Creating a variable for league based on the x values\ndata &lt;- data %&gt;%\n  mutate(league = ifelse(x &lt; 1, \"NFL\", \n                          ifelse(x &gt;= 1 & x &lt; 1.5, \"MLB\", \n                          ifelse(x &gt;= 2 & x &lt; 3, \"NBA\", \n                          ifelse(x &gt;= 3.5 & x &lt; 5, \"NHL\", \"error\"))))) \n#Restricting to the variables needed for data analysis\ndata_t &lt;- data %&gt;%\n  select(league, y)\n\n\n# Compute summary statistics, all statistics were rescaled to the 1000s\nsummary_stats &lt;- data_t %&gt;%\n  group_by(league) %&gt;%\n  summarise(\n    `Mean (SD)` = paste0((round(mean(y), -1)/1000), \" (\", (round(sd(y), -1)/1000), \")\"),\n    `Median (Q1, Q3)` = paste0((round(median(y), -1)/1000), \" (\", \n                                (round(quantile(y, 0.25), -1)/1000), \", \", \n                                (round(quantile(y, 0.75),-1)/1000), \")\"),\n    Min = (round(min(y), -1)/1000),\n    Max = (round(max(y), -1)/1000),\n    .groups = \"drop\"\n  )\n\n\n# Compute p-values\nanova_p &lt;- summary(aov(y ~ league, data = data_t))[[1]][\"Pr(&gt;F)\"][1, 1] #comparison of means\nkw_p &lt;- kruskal.test(y ~ league, data = data_t)$p.value #comparison of medians\n\n# Convert p-values to a formatted row\np_values &lt;- data.frame(\n  league = \"p-value\",\n  `Mean (SD)` = if_else(anova_p &lt; 0.0001, \"&lt;0.0001\", as.character(round(anova_p, 4))),\n  `Median (Q1, Q3)` = if_else(anova_p &lt; 0.0001, \"&lt;0.0001\", as.character(round(kw_p, 4))),\n  Min = NA,\n  Max = NA\n)\n\n#Created a dataset from the p-value information so p-values could be appended as columns rather than rows, also renamed columns\np_values_mini &lt;- p_values %&gt;%\n  select(`Mean..SD.`, `Median..Q1..Q3.`) %&gt;%\n  rename(p_value_mean = `Mean..SD.`, p_value_median = `Median..Q1..Q3.`) %&gt;%\n  add_row(p_value_mean = c(rep(\"-\", 3)), p_value_median = c(rep(\"-\", 3)))\n# Combine statistics and p-values\nfinal_table &lt;- bind_cols(summary_stats, p_values_mini)\n\n#Finding the max of the range of the x-axis to be used in each of the histograms so the histograms can have the same x-axis\nxlim_range &lt;- range(data$y, na.rm = TRUE)\n\n#Creating distribution of attendance by league\ndensity_plots &lt;- data %&gt;%\n  group_by(league) %&gt;%\n  group_split() %&gt;%\n  purrr::map(~ {\n    p &lt;- ggplot(.x, aes(x = y)) +\n      geom_density(fill = unique(.x$color), alpha = 0.5) +\n      xlim(xlim_range) + \n      theme_minimal() +\n      labs(x = NULL, y = NULL) +\n      theme(axis.text = element_blank(), axis.ticks = element_blank())\n\n    # Save image and return filename\n    img_file &lt;- paste0(\"density_\", unique(.x$league), \".png\")\n    ggsave(img_file, plot = p, width = 2, height = 1)\n    return(img_file)\n  })\n\n#Adding filenames of the histograms to the stats results\nfinal_table$density &lt;- density_plots\n\n#Identifying the row where the minimum min is\nmin_row &lt;- which.min(final_table$Min)\n#Identifying the row where the maximum max is\nmax_row &lt;- which.max(final_table$Max)\n\n# Create a publication-ready table with gt\n\ngt_table &lt;- final_table %&gt;%\n  gt() %&gt;%\n  #Setting table title\n  tab_header(\n    title = \"Average regular season home game attendence, in thousands\",\n    subtitle = \"Comparison across Big Four men's sports leagues\"\n  ) %&gt;%\n  #Creating header that spans multiple columns\n  tab_spanner(\n    label = md(\"**Summary Statistics**\"),\n    columns = c(`Mean (SD)`, `Median (Q1, Q3)`, Min, Max)\n  ) %&gt;%\n  fmt_image(\n  columns = density,\n  rows = everything(),\n  height = NULL,\n  width = NULL,\n  sep = \" \",\n  path = NULL,\n  file_pattern = \"{x}\",\n  encode = TRUE\n) %&gt;%\n\n  cols_label(\n    league = \"League\",\n    `Mean (SD)` = \"Mean (SD)\",\n    `Median (Q1, Q3)` = \"Median (Q1, Q3)\",\n    Min = \"Min\",\n    Max = \"Max\",\n    p_value_mean = md(\"Comparison of means *P*-value\"),\n    p_value_median = md(\"Comparison of medians *P*-value\"),\n    density = \"Distribution of attendance\"\n    \n  ) %&gt;%\n  # Apply style to the cell with the lowest value in the Min column\n  tab_style(\n    style = list(cell_fill(color = \"lightgray\"),\n    cell_text(color = \"black\")),\n    locations = cells_body(\n      rows = min_row,\n      columns = \"Min\"\n    )\n  )%&gt;%\n  # Apply style to the cell with the highest value in the max column\n  tab_style(\n    style = list(cell_fill(color = \"lightblue\"),\n    cell_text(color = \"blue\")),\n    locations = cells_body(\n      rows = max_row,\n      columns = \"Max\"\n    )\n  )%&gt;%\n    #Making all column headers bld\n    tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels(everything()) \n  )%&gt;%\n    #Creating a footnote for the ANOVA p-value\n    tab_footnote(\n    footnote = md(\"*P*-value from ANOVA comparing mean attendance across the 4 leagues\"),\n    locations = cells_column_labels(columns = p_value_mean)\n  ) %&gt;%\n    #Creating a footnote for the Kruskal wallis p-value\n    tab_footnote(\n    footnote = md(\"*P*-value from Kruskal-Wallis test comparing median attendance across the 4 leagues\"),\n    locations = cells_column_labels(columns = p_value_median)\n  )  %&gt;%\n  #Creating footnote to explain coloring of the cells\n  tab_footnote(\n    footnote = md(\"Blue cell notes row with highest maximum attendence. Gray cell notes row with lowest minimum attendance.\")) %&gt;%\n  fmt_missing(columns = everything(), missing_text = \"—\") %&gt;%\n  #Adding descriptive caption for the table\n  tab_source_note(\n    source_note = md(\"**Table 1 caption:** Table presents basic summary statistics (i.e., mean, median, min, and max) home game attendance by league, demonstrating that there are substantial differences in game attendence by sport, with attendance being highest for NFL games and lowest for NHL games.\")\n  ) \nWarning: Since gt v0.6.0 `fmt_missing()` is deprecated and will soon be removed.\nℹ Use `sub_missing()` instead.\nThis warning is displayed once every 8 hours.\n# Print table\ngt_table\n\n\n\n  \n    \n      Average regular season home game attendence, in thousands\n    \n    \n      Comparison across Big Four men's sports leagues\n    \n    \n      League\n      \n        Summary Statistics\n      \n      Comparison of means P-value1\n      Comparison of medians P-value2\n      Distribution of attendance\n    \n    \n      Mean (SD)\n      Median (Q1, Q3)\n      Min\n      Max\n    \n  \n  \n    MLB\n26.79 (9.64)\n28.4 (18.15, 32.92)\n9.76\n47.71\n&lt;0.0001\n&lt;0.0001\n\n    NBA\n17.97 (2.14)\n17.91 (16.29, 19.73)\n13.98\n21.56\n-\n-\n\n    NFL\n69.78 (6.51)\n69.01 (66.46, 72.06)\n58.28\n93.88\n-\n-\n\n    NHL\n16.89 (3.06)\n17.24 (15.72, 18.76)\n4.76\n21.07\n-\n-\n\n  \n  \n    \n      Table 1 caption: Table presents basic summary statistics (i.e., mean, median, min, and max) home game attendance by league, demonstrating that there are substantial differences in game attendence by sport, with attendance being highest for NFL games and lowest for NHL games.\n    \n  \n  \n    \n       Blue cell notes row with highest maximum attendence. Gray cell notes row with lowest minimum attendance.\n    \n    \n      1 P-value from ANOVA comparing mean attendance across the 4 leagues\n    \n    \n      2 P-value from Kruskal-Wallis test comparing median attendance across the 4 leagues"
  }
]